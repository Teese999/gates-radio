#include <Arduino.h>
#include <WiFi.h>
#include <WebServer.h>
#include <Preferences.h>
#include <RCSwitch.h>
#include <ArduinoJson.h>
#include <SPIFFS.h>
#include <ESPmDNS.h>
#include <WebSocketsServer.h>

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
#include "RF433Receiver.h"
#include "GateControl.h"
#include "GSMManager.h"

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–∏–Ω–æ–≤ ---
// –ü–∏–Ω—ã –¥–ª—è 433MHz –ø—Ä–∏–µ–º–Ω–∏–∫–∞
#define RF_DATA_PIN 13 // GPIO13 - Data pin –¥–ª—è 433MHz –ø—Ä–∏–µ–º–Ω–∏–∫–∞

// –ü–∏–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ—Ç–∞–º–∏
#define LED_PIN     12 // GPIO12 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–º/—Ä–µ–ª–µ

// –ü–∏–Ω—ã –¥–ª—è GSM SIM800L (UART2)
#define GSM_RX_PIN  21 // GPIO21 - RX –ø–∏–Ω –¥–ª—è UART2 (–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ TX GSM –º–æ–¥—É–ª—è)
#define GSM_TX_PIN  16 // GPIO16 - TX –ø–∏–Ω –¥–ª—è UART2 (–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ RX GSM –º–æ–¥—É–ª—è)

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ---
Preferences preferences; // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ NVS
RCSwitch mySwitch = RCSwitch(); // –û–±—ä–µ–∫—Ç 433MHz –ø—Ä–∏–µ–º–Ω–∏–∫–∞
WebServer server(80); // –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 80
WebSocketsServer webSocket(81); // WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 81

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ---
struct PhoneEntry {
  String number;
  bool smsEnabled;
  bool callEnabled;
};

struct WiFiNetwork {
  String ssid;
  int rssi;
  int encryption;
};

// –ï–¥–∏–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
struct SystemState {
  std::vector<PhoneEntry> phones;
  std::vector<unsigned long> keys433;
  String wifiSSID;
  String wifiPassword;
  bool wifiConnected;
};

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ---
SystemState systemState;
std::vector<WiFiNetwork> wifiNetworks;

// --- –û–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π ---
void sendWebSocketEvent(const char* event, const char* data);
void sendLog(String message, const char* type);
void saveSystemState();
void loadSystemState();

// --- WebSocket —Ñ—É–Ω–∫—Ü–∏–∏ ---
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.printf("[WebSocket] –ö–ª–∏–µ–Ω—Ç %u –æ—Ç–∫–ª—é—á–µ–Ω\n", num);
      break;
    case WStype_CONNECTED:
      {
        IPAddress ip = webSocket.remoteIP(num);
        Serial.printf("[WebSocket] –ö–ª–∏–µ–Ω—Ç %u –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–∑ %d.%d.%d.%d\n", num, ip[0], ip[1], ip[2], ip[3]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        String welcomeMsg = "üåê –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: " + String(ip[0]) + "." + String(ip[1]) + "." + String(ip[2]) + "." + String(ip[3]);
        sendLog(welcomeMsg, "success");
      }
      break;
    case WStype_TEXT:
      Serial.printf("[WebSocket] –ü–æ–ª—É—á–µ–Ω–æ: %s\n", payload);
      break;
    default:
      break;
  }
}

void sendWebSocketEvent(const char* event, const char* data) {
  String json = "{\"event\":\"" + String(event) + "\",\"data\":" + String(data) + "}";
  webSocket.broadcastTXT(json);
  Serial.println("[WebSocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + json);
}

void sendLog(String message, const char* type = "info") {
  String logData = "{\"message\":\"" + message + "\",\"type\":\"" + String(type) + "\"}";
  sendWebSocketEvent("log", logData.c_str());
}

// --- –§—É–Ω–∫—Ü–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
void handleRoot() {
  if (SPIFFS.exists("/index.html")) {
    File file = SPIFFS.open("/index.html", "r");
    server.streamFile(file, "text/html");
    file.close();
  } else {
    server.send(404, "text/plain", "index.html not found");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WiFi —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
void handleWiFiScan() {
  Serial.println("[API] WiFi Scan –∑–∞–ø—Ä–æ—à–µ–Ω");
  sendLog("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ WiFi —Å–µ—Ç–µ–π...", "info");
  
  int n = WiFi.scanNetworks();
  wifiNetworks.clear();
  sendLog("üì° –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π: " + String(n), "success");
  
  JsonDocument doc;
  JsonArray networks = doc.to<JsonArray>();
  
  for (int i = 0; i < n; i++) {
    JsonObject network = networks.add<JsonObject>();
    network["ssid"] = WiFi.SSID(i);
    network["rssi"] = WiFi.RSSI(i);
    network["encryption"] = (WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? 0 : 1;
    
    WiFiNetwork wifiNet;
    wifiNet.ssid = WiFi.SSID(i);
    wifiNet.rssi = WiFi.RSSI(i);
    wifiNet.encryption = (WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? 0 : 1;
    wifiNetworks.push_back(wifiNet);
  }
  
  String response;
  serializeJson(doc, response);
  server.send(200, "application/json", response);
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi
void handleWiFiConnect() {
  if (server.method() != HTTP_POST) {
    server.send(405, "text/plain", "Method Not Allowed");
    return;
  }
  
  JsonDocument doc;
  deserializeJson(doc, server.arg("plain"));
  
  String ssid = doc["ssid"].as<String>();
  String password = doc["password"].as<String>();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  systemState.wifiSSID = ssid;
  systemState.wifiPassword = password;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  saveSystemState();
  
  Serial.println("[API] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi: " + ssid);
  
  WiFi.begin(ssid.c_str(), password.c_str());
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  JsonDocument response;
  if (WiFi.status() == WL_CONNECTED) {
    response["success"] = true;
    response["ip"] = WiFi.localIP().toString();
    response["ssid"] = WiFi.SSID();
    response["rssi"] = WiFi.RSSI();
    Serial.println("\n[WiFi] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! IP: " + WiFi.localIP().toString());
    sendLog("‚úÖ WiFi –ø–æ–¥–∫–ª—é—á–µ–Ω: " + WiFi.localIP().toString(), "success");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ WebSocket
    String wifiStatus = "{\"status\":\"connected\",\"ssid\":\"" + WiFi.SSID() + "\",\"rssi\":" + String(WiFi.RSSI()) + ",\"ip\":\"" + WiFi.localIP().toString() + "\"}";
    sendWebSocketEvent("wifi_status", wifiStatus.c_str());
  } else {
    response["success"] = false;
    response["error"] = "Connection failed";
    Serial.println("\n[WiFi] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    sendLog("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi: " + ssid, "error");
  }
  
  String responseStr;
  serializeJson(response, responseStr);
  server.send(200, "application/json", responseStr);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ NVS
void saveSystemState() {
  preferences.begin("system", false);
  
  JsonDocument doc;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
  JsonArray phonesArray = doc["phones"].to<JsonArray>();
  for (const auto& phone : systemState.phones) {
    JsonObject phoneObj = phonesArray.add<JsonObject>();
    phoneObj["number"] = phone.number;
    phoneObj["smsEnabled"] = phone.smsEnabled;
    phoneObj["callEnabled"] = phone.callEnabled;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏
  JsonArray keysArray = doc["keys"].to<JsonArray>();
  for (const auto& key : systemState.keys433) {
    keysArray.add(key);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  doc["wifi"]["ssid"] = systemState.wifiSSID;
  doc["wifi"]["password"] = systemState.wifiPassword;
  doc["wifi"]["connected"] = systemState.wifiConnected;
  
  String jsonString;
  serializeJson(doc, jsonString);
  preferences.putString("state", jsonString);
  preferences.end();
  
  Serial.println("[NVS] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–∑ NVS
void loadSystemState() {
  preferences.begin("system", true);
  String jsonString = preferences.getString("state", "{}");
  preferences.end();
  
  JsonDocument doc;
  deserializeJson(doc, jsonString);
  
  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  systemState.phones.clear();
  systemState.keys433.clear();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
  if (doc["phones"].is<JsonArray>()) {
    JsonArray phonesArray = doc["phones"];
    for (JsonObject phoneObj : phonesArray) {
      PhoneEntry phone;
      phone.number = phoneObj["number"].as<String>();
      phone.smsEnabled = phoneObj["smsEnabled"].as<bool>();
      phone.callEnabled = phoneObj["callEnabled"].as<bool>();
      systemState.phones.push_back(phone);
    }
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
  if (doc["keys"].is<JsonArray>()) {
    JsonArray keysArray = doc["keys"];
    for (unsigned long key : keysArray) {
      if (key > 0) {
        systemState.keys433.push_back(key);
      }
    }
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if (doc["wifi"].is<JsonObject>()) {
    JsonObject wifiObj = doc["wifi"];
    systemState.wifiSSID = wifiObj["ssid"].as<String>();
    systemState.wifiPassword = wifiObj["password"].as<String>();
    systemState.wifiConnected = wifiObj["connected"].as<bool>();
  }
  
  Serial.println("[NVS] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ: " + String(systemState.phones.size()) + " —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, " + String(systemState.keys433.size()) + " –∫–ª—é—á–µ–π");
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
void handlePhonesAPI() {
  if (server.method() == HTTP_GET) {
    JsonDocument doc;
    JsonArray phonesArray = doc.to<JsonArray>();
    
    for (const auto& phone : systemState.phones) {
      JsonObject obj = phonesArray.add<JsonObject>();
      obj["id"] = phone.number; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–∞–∫ ID
      obj["number"] = phone.number;
      obj["smsEnabled"] = phone.smsEnabled;
      obj["callEnabled"] = phone.callEnabled;
    }
    
    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
  } 
  else if (server.method() == HTTP_POST) {
    JsonDocument doc;
    deserializeJson(doc, server.arg("plain"));
    
    PhoneEntry phone;
    phone.number = doc["number"].as<String>();
    phone.smsEnabled = doc["smsEnabled"].as<bool>();
    phone.callEnabled = doc["callEnabled"].as<bool>();
    systemState.phones.push_back(phone);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveSystemState();
    
    Serial.println("[API] –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: " + phone.number);
    sendLog("üì± –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: " + phone.number, "success");
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å ID (–Ω–æ–º–µ—Ä–æ–º)
    JsonDocument responseDoc;
    responseDoc["id"] = phone.number;
    responseDoc["number"] = phone.number;
    responseDoc["smsEnabled"] = phone.smsEnabled;
    responseDoc["callEnabled"] = phone.callEnabled;
    
    String response;
    serializeJson(responseDoc, response);
    server.send(200, "application/json", response);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
void handlePhoneUpdate() {
  JsonDocument doc;
  deserializeJson(doc, server.arg("plain"));
  
  String phoneNumber = doc["id"].as<String>();
  
  if (phoneNumber.length() == 0) {
    server.send(400, "application/json", "{\"error\":\"Invalid phone number\"}");
    return;
  }
  
  for (auto& phone : systemState.phones) {
    if (phone.number == phoneNumber) {
      if (doc["smsEnabled"].is<bool>()) {
        phone.smsEnabled = doc["smsEnabled"].as<bool>();
      }
      if (doc["callEnabled"].is<bool>()) {
        phone.callEnabled = doc["callEnabled"].as<bool>();
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      saveSystemState();
      
      Serial.println("[API] –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω " + phoneNumber + ": SMS=" + String(phone.smsEnabled) + ", Call=" + String(phone.callEnabled));
      sendLog("üì± –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + phone.number, "success");
      server.send(200, "application/json", "{\"success\":true}");
      return;
    }
  }
  
  server.send(404, "application/json", "{\"error\":\"Phone not found\"}");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
void handlePhonesDelete() {
  JsonDocument doc;
  deserializeJson(doc, server.arg("plain"));
  
  String phoneNumber = doc["id"].as<String>();
  
  for (auto it = systemState.phones.begin(); it != systemState.phones.end(); ++it) {
    if (it->number == phoneNumber) {
      String number = it->number;
      systemState.phones.erase(it);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      saveSystemState();
      
      Serial.println("[API] –£–¥–∞–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: " + number);
      sendLog("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: " + number, "warning");
      server.send(200, "application/json", "{\"success\":true}");
      return;
    }
  }
  
  server.send(404, "application/json", "{\"success\":false,\"error\":\"Not found\"}");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
void handleKeysAPI() {
  if (server.method() == HTTP_GET) {
    JsonDocument doc;
    JsonArray keysArray = doc.to<JsonArray>();
    
    for (const auto& key : systemState.keys433) {
      keysArray.add(key);
    }
    
    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
void handleKeysLearn() {
  Serial.println("[API] –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
  sendLog("üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –±—Ä–µ–ª–∫–µ", "warning");
  server.send(200, "application/json", "{\"success\":true,\"message\":\"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –±—Ä–µ–ª–∫–µ\"}");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞
void handleKeysDelete() {
  JsonDocument doc;
  deserializeJson(doc, server.arg("plain"));
  
  unsigned long key = doc["key"];
  
  for (auto it = systemState.keys433.begin(); it != systemState.keys433.end(); ++it) {
    if (*it == key) {
      systemState.keys433.erase(it);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      saveSystemState();
      
      Serial.println("[API] –£–¥–∞–ª–µ–Ω –∫–ª—é—á: " + String(key));
      sendLog("üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–ª—é—á: " + String(key), "warning");
      server.send(200, "application/json", "{\"success\":true}");
      return;
    }
  }
  
  server.send(404, "application/json", "{\"success\":false,\"error\":\"Not found\"}");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–æ—Ä–æ—Ç
void handleGateTrigger() {
  Serial.println("[API] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–æ—Ä–æ—Ç");
  sendLog("‚ö° –°–∏–≥–Ω–∞–ª –Ω–∞ –≤–æ—Ä–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", "success");
  GateControl::triggerGatePulse(500);
  server.send(200, "application/json", "{\"success\":true}");
}

// --- Setup Function ---
void setup() {
  Serial.begin(115200);
  Serial.println("=================================");
  Serial.println("–ü—Ä–æ–µ–∫—Ç: –£–º–Ω—ã–µ –í–æ—Ä–æ—Ç–∞ (Web + React)");
  Serial.println("ESP32 DevKit 38 pin");
  Serial.println("=================================");
  Serial.println("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Preferences
  preferences.begin("smart-gate", false);
  Serial.println("[OK] Preferences –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
  loadSystemState();
  

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GateControl
  GateControl::init(LED_PIN);
  Serial.println("[OK] GateControl –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RF433Receiver
  mySwitch.enableReceive(RF_DATA_PIN);
  RF433Receiver::init(&mySwitch);
  Serial.println("[OK] 433MHz –ø—Ä–∏–µ–º–Ω–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Ç–∏
  if (systemState.wifiSSID.length() > 0) {
    Serial.println("[WiFi] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Ç–∏: " + systemState.wifiSSID);
    WiFi.begin(systemState.wifiSSID.c_str(), systemState.wifiPassword.c_str());
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
    Serial.println();
    
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("[WiFi] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! IP: " + WiFi.localIP().toString());
      systemState.wifiConnected = true;
    } else {
      Serial.println("[WiFi] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Ç–∏");
      systemState.wifiConnected = false;
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ WiFi Access Point (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
  WiFi.softAP("SmartGate-Config", "12345678");
  Serial.println("[OK] WiFi Access Point —Å–æ–∑–¥–∞–Ω");
  Serial.println("SSID: SmartGate-Config");
  Serial.println("Password: 12345678");
  Serial.println("IP: 192.168.4.1");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mDNS
  if (MDNS.begin("smartgate")) {
    Serial.println("[OK] mDNS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    Serial.println("–î–æ–º–µ–Ω: http://smartgate.local");
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);
  } else {
    Serial.println("[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ mDNS");
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SPIFFS");
  } else {
    Serial.println("[OK] SPIFFS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤)
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  Serial.println("[OK] WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 81");

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
  server.on("/", handleRoot);
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  server.onNotFound([]() {
    String path = server.uri();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
    if (path.startsWith("/static/")) {
      if (SPIFFS.exists(path)) {
        File file = SPIFFS.open(path, "r");
        String contentType = "text/plain";
        
        if (path.endsWith(".css")) {
          contentType = "text/css";
        } else if (path.endsWith(".js")) {
          contentType = "application/javascript";
        } else if (path.endsWith(".html")) {
          contentType = "text/html";
        } else if (path.endsWith(".json")) {
          contentType = "application/json";
        }
        
        server.streamFile(file, contentType);
        file.close();
        return;
      }
    }
    
    server.send(404, "text/plain", "Not Found: " + path);
  });
  
  // API endpoints
  server.on("/api/wifi/scan", HTTP_GET, handleWiFiScan);
  server.on("/api/wifi/connect", HTTP_POST, handleWiFiConnect);
  server.on("/api/phones", handlePhonesAPI);
  server.on("/api/phones/delete", HTTP_POST, handlePhonesDelete);
  server.on("/api/phones/update", HTTP_PUT, handlePhoneUpdate);
  server.on("/api/keys", handleKeysAPI);
  server.on("/api/keys/learn", HTTP_POST, handleKeysLearn);
  server.on("/api/keys/delete", HTTP_POST, handleKeysDelete);
  server.on("/api/gate/trigger", HTTP_POST, handleGateTrigger);
  
  server.begin();
  Serial.println("[OK] –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 80");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GSMManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –∫–æ–≥–¥–∞ GSM –º–æ–¥—É–ª—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
  // GSMManager::init(&modem, GSM_TX_PIN, GSM_RX_PIN);
  // Serial.println("[OK] GSM –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  
  Serial.println("=================================");
  Serial.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  Serial.println("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ WiFi: SmartGate-Config");
  Serial.println("–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://smartgate.local");
  Serial.println("–ò–ª–∏ –ø–æ IP: http://192.168.4.1");
  Serial.println("=================================");
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ WebSocket (–±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
  delay(1000);
  sendLog("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", "success");
  sendLog("üì° WiFi AP: SmartGate-Config", "info");
  sendLog("üåê –ê–¥—Ä–µ—Å: http://smartgate.local", "info");
  sendLog("üîå 433MHz –ø—Ä–∏–µ–º–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω", "info");
}

// --- Loop Function ---
void loop() {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
  server.handleClient();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket
  webSocket.loop();
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WiFi –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
  static unsigned long lastWiFiUpdate = 0;
  static bool wasConnected = false;
  
  if (millis() - lastWiFiUpdate > 5000) {
    lastWiFiUpdate = millis();
    
    if (WiFi.status() == WL_CONNECTED) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      String wifiStatus = "{\"status\":\"connected\",\"ssid\":\"" + WiFi.SSID() + "\",\"rssi\":" + String(WiFi.RSSI()) + ",\"ip\":\"" + WiFi.localIP().toString() + "\"}";
      sendWebSocketEvent("wifi_status", wifiStatus.c_str());
      
      if (!wasConnected) {
        wasConnected = true;
        Serial.println("[WiFi] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: " + WiFi.SSID());
      }
    } else {
      // –ï—Å–ª–∏ –±—ã–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      if (systemState.wifiSSID.length() > 0) {
        if (wasConnected) {
          Serial.println("[WiFi] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: " + systemState.wifiSSID);
          sendLog("‚ö†Ô∏è WiFi –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ " + systemState.wifiSSID + "...", "warning");
          wasConnected = false;
        }
        WiFi.begin(systemState.wifiSSID.c_str(), systemState.wifiPassword.c_str());
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      String wifiStatus = "{\"status\":\"disconnected\"}";
      sendWebSocketEvent("wifi_status", wifiStatus.c_str());
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ 433MHz —Å–∏–≥–Ω–∞–ª–æ–≤
  if (mySwitch.available()) {
    unsigned long key = mySwitch.getReceivedValue();
    int bitLength = mySwitch.getReceivedBitlength();
    int protocol = mySwitch.getReceivedProtocol();
    
    if (key != 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª—é—á
      bool keyExists = false;
      for (const auto& existingKey : systemState.keys433) {
        if (existingKey == key) {
          keyExists = true;
          break;
        }
      }
      
      // –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      if (!keyExists) {
        systemState.keys433.push_back(key);
        saveSystemState();
        Serial.println("[433MHz] –ù–æ–≤—ã–π –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω: " + String(key));
        sendLog("üîë –ù–æ–≤—ã–π –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω: " + String(key), "success");
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ React —á–µ—Ä–µ–∑ WebSocket
      String keyData = "{\"key\":" + String(key) + 
                       ",\"bitLength\":" + String(bitLength) + 
                       ",\"protocol\":" + String(protocol) + 
                       ",\"timestamp\":" + String(millis()) + "}";
      sendWebSocketEvent("key_received", keyData.c_str());
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ Serial, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å —Ñ—Ä–æ–Ω—Ç–æ–º
      Serial.println("[433MHz] –ö–ª—é—á: " + String(key) + ", –ü—Ä–æ—Ç–æ–∫–æ–ª: " + String(protocol));
    }
    
    mySwitch.resetAvailable();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ GSM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –∫–æ–≥–¥–∞ GSM –º–æ–¥—É–ª—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
  // GSMManager::handleGSM();
}