import React, { useState, useEffect } from 'react';
import './PhonePage.css';

interface Phone {
  id: string; // –¢–µ–ø–µ—Ä—å ID - —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  number: string;
  smsEnabled: boolean;
  callEnabled: boolean;
}

interface PhonePageProps {
  onBack: () => void;
  apiCall: (endpoint: string, method?: string, data?: any) => Promise<any>;
  addLog: (message: string, type?: 'info' | 'error' | 'success' | 'warning') => void;
}

const PhonePage: React.FC<PhonePageProps> = ({ onBack, apiCall, addLog }) => {
  const [phones, setPhones] = useState<Phone[]>([]);
  const [newPhone, setNewPhone] = useState('');
  const [loading, setLoading] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
  const loadPhones = async () => {
    try {
      setLoading(true);
      const data = await apiCall('/api/phones');
      setPhones(data);
      addLog(`üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤`, 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', 'error');
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const addPhone = async () => {
    if (!newPhone.trim()) {
      addLog('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'warning');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ +7)
    const phoneNumber = newPhone.replace(/\D/g, '');
    if (phoneNumber.length !== 10) {
      addLog('‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Ü–∏—Ñ—Ä', 'warning');
      return;
    }

    try {
      setLoading(true);
      const fullNumber = `+7${phoneNumber}`;
      const data = await apiCall('/api/phones', 'POST', { 
        number: fullNumber,
        smsEnabled: true,
        callEnabled: true
      });
      
      setPhones(prev => [...prev, data]);
      setNewPhone('');
      addLog(`‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω ${fullNumber} –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const deletePhone = async (id: string) => {
    try {
      setLoading(true);
      await apiCall('/api/phones/delete', 'POST', { id });
      setPhones(prev => prev.filter(phone => phone.id !== id));
      addLog('‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —É–¥–∞–ª–µ–Ω', 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
    } finally {
      setLoading(false);
      setShowDeleteConfirm(null);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ SMS
  const toggleSMS = async (id: string, enabled: boolean) => {
    try {
      setLoading(true);
      await apiCall('/api/phones/update', 'PUT', { id, smsEnabled: enabled });
      setPhones(prev => prev.map(phone => 
        phone.id === id ? { ...phone, smsEnabled: enabled } : phone
      ));
      addLog(`üì± SMS ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'} –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞`, 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMS', 'error');
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMS:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
  const toggleCall = async (id: string, enabled: boolean) => {
    try {
      setLoading(true);
      await apiCall('/api/phones/update', 'PUT', { id, callEnabled: enabled });
      setPhones(prev => prev.map(phone => 
        phone.id === id ? { ...phone, callEnabled: enabled } : phone
      ));
      addLog(`üìû –ó–≤–æ–Ω–∫–∏ ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'} –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞`, 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤–æ–Ω–∫–æ–≤', 'error');
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤–æ–Ω–∫–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const handlePhoneInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\D/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if (value.length <= 10) {
      setNewPhone(value);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      addPhone();
    }
  };

  useEffect(() => {
    loadPhones();
  }, []);

  return (
    <div className="phone-page">
      <div className="page-header">
        <button className="btn-back" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <h2>üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏</h2>
      </div>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
      <div className="add-phone-section">
        <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</h3>
        <div className="phone-input-group">
          <div className="phone-prefix">+7</div>
          <input
            type="text"
            className="phone-input"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            value={newPhone}
            onChange={handlePhoneInput}
            onKeyPress={handleKeyPress}
            maxLength={10}
            disabled={loading}
          />
          <button 
            className="btn btn-success"
            onClick={addPhone}
            disabled={loading || !newPhone.trim()}
          >
            {loading ? '‚è≥' : '‚ûï'}
          </button>
        </div>
        <div className="phone-hint">
          –í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +7)
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ */}
      <div className="phones-section">
        <h3>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã ({phones.length})</h3>
        
        {loading && phones.length === 0 ? (
          <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : phones.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üì±</div>
            <div className="empty-text">–¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</div>
            <div className="empty-hint">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ—Ç–∞–º–∏</div>
          </div>
        ) : (
          <div className="phones-list">
            {phones.map((phone) => (
              <div key={phone.id} className="phone-item">
                <div className="phone-info">
                  <div className="phone-number">{phone.number}</div>
                  <div className="phone-status">
                    <span className={`status-badge ${phone.smsEnabled ? 'active' : 'inactive'}`}>
                      üì± SMS {phone.smsEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}
                    </span>
                    <span className={`status-badge ${phone.callEnabled ? 'active' : 'inactive'}`}>
                      üìû –ó–≤–æ–Ω–æ–∫ {phone.callEnabled ? '–í–ö–õ' : '–í–´–ö–õ'}
                    </span>
                  </div>
                </div>
                
                <div className="phone-controls">
                  <button
                    className={`btn-toggle ${phone.smsEnabled ? 'active' : 'inactive'}`}
                    onClick={() => toggleSMS(phone.id, !phone.smsEnabled)}
                    disabled={loading}
                    title={`${phone.smsEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'} SMS`}
                  >
                    üì±
                  </button>
                  
                  <button
                    className={`btn-toggle ${phone.callEnabled ? 'active' : 'inactive'}`}
                    onClick={() => toggleCall(phone.id, !phone.callEnabled)}
                    disabled={loading}
                    title={`${phone.callEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'} –∑–≤–æ–Ω–∫–∏`}
                  >
                    üìû
                  </button>
                  
                  <button
                    className="btn-delete"
                    onClick={() => setShowDeleteConfirm(phone.id)}
                    disabled={loading}
                    title="–£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      {showDeleteConfirm && (
        <div className="modal-overlay" onClick={() => setShowDeleteConfirm(null)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω?</p>
            <p className="phone-to-delete">
              {phones.find(p => p.id === showDeleteConfirm)?.number}
            </p>
            <div className="modal-buttons">
              <button 
                className="btn btn-danger"
                onClick={() => deletePhone(showDeleteConfirm)}
                disabled={loading}
              >
                {loading ? '‚è≥' : 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å'}
              </button>
              <button 
                className="btn"
                onClick={() => setShowDeleteConfirm(null)}
                disabled={loading}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PhonePage;
