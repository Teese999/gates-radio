import React, { useState, useEffect } from 'react';
import './KeyPage.css';

interface Key {
  code: number;
  name: string;
  enabled: boolean;
  bitLength: number;
  protocol: number;
  timestamp: number;
}

interface KeyPageProps {
  onBack: () => void;
  apiCall: (endpoint: string, method?: string, data?: any) => Promise<any>;
  addLog: (message: string, type?: 'info' | 'error' | 'success' | 'warning') => void;
}

const KeyPage: React.FC<KeyPageProps> = ({ onBack, apiCall, addLog }) => {
  const [keys, setKeys] = useState<Key[]>([]);
  const [loading, setLoading] = useState(false);
  const [learning, setLearning] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<number | null>(null);
  const [editingKey, setEditingKey] = useState<number | null>(null);
  const [editingName, setEditingName] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
  const loadKeys = async () => {
    try {
      setLoading(true);
      const response = await apiCall('/api/keys');
      setKeys(response);
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π', 'error');
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
  const checkLearningStatus = async () => {
    try {
      const response = await apiCall('/api/keys/status');
      setLearning(response.learningMode);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
    }
  };

  useEffect(() => {
    loadKeys();
    checkLearningStatus();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(checkLearningStatus, 2000);
    return () => clearInterval(interval);
  }, []);

  // –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
  const startLearning = async () => {
    try {
      await apiCall('/api/keys/learn', 'POST');
      addLog('üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'info');
      // –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ checkLearningStatus
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è', 'error');
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
  const stopLearning = async () => {
    try {
      await apiCall('/api/keys/stop', 'POST');
      addLog('üõë –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'warning');
      // –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ checkLearningStatus
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è', 'error');
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
  const deleteKey = async (code: number) => {
    try {
      setLoading(true);
      await apiCall('/api/keys/delete', 'POST', { code });
      setKeys(prev => prev.filter(key => key.code !== code));
      addLog('‚úÖ –ö–ª—é—á —É–¥–∞–ª–µ–Ω', 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞', 'error');
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
    } finally {
      setLoading(false);
      setShowDeleteConfirm(null);
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
  const toggleKey = async (code: number, enabled: boolean) => {
    try {
      setLoading(true);
      await apiCall('/api/keys/update', 'PUT', { code, enabled });
      setKeys(prev => prev.map(key =>
        key.code === code ? { ...key, enabled } : key
      ));
      addLog(`üîë –ö–ª—é—á ${enabled ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`, 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª—é—á–∞', 'error');
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª—é—á–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
  const renameKey = async (code: number, newName: string) => {
    try {
      setLoading(true);
      await apiCall('/api/keys/update', 'PUT', { code, name: newName });
      setKeys(prev => prev.map(key =>
        key.code === code ? { ...key, name: newName } : key
      ));
      addLog('‚úÖ –ò–º—è –∫–ª—é—á–∞ –∏–∑–º–µ–Ω–µ–Ω–æ', 'success');
    } catch (error) {
      addLog('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞', 'error');
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞:', error);
    } finally {
      setLoading(false);
      setEditingKey(null);
      setEditingName('');
    }
  };

  // –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
  const startEditing = (key: Key) => {
    setEditingKey(key.code);
    setEditingName(key.name);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
  const saveName = () => {
    if (editingKey && editingName.trim()) {
      renameKey(editingKey, editingName.trim());
    }
  };

  // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const cancelEditing = () => {
    setEditingKey(null);
    setEditingName('');
  };

  return (
    <div className="key-page">
      <div className="key-header">
        <button className="back-btn" onClick={onBack}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <h1>üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏</h1>
      </div>

      <div className="key-controls">
        {!learning ? (
          <button 
            className="learn-btn"
            onClick={startLearning}
            disabled={loading}
          >
            üéì –û–±—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á
          </button>
        ) : (
          <button 
            className="stop-btn"
            onClick={stopLearning}
            disabled={loading}
          >
            üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
          </button>
        )}
      </div>

      {learning && (
        <div className="learning-status">
          <div className="learning-indicator">
            <div className="pulse"></div>
            <span>–î–µ—Ä–∂–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –±—Ä–µ–ª–∫–µ...</span>
          </div>
        </div>
      )}

      <div className="keys-list">
        {keys.length === 0 ? (
          <div className="empty-state">
            <p>üì≠ –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            <p>–ù–∞–∂–º–∏—Ç–µ "–û–±—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</p>
          </div>
        ) : (
          keys.map((key) => (
            <div key={key.code} className={`key-item ${!key.enabled ? 'disabled' : ''}`}>
              <div className="key-info">
                {editingKey === key.code ? (
                  <div className="edit-name">
                    <input
                      type="text"
                      value={editingName}
                      onChange={(e) => setEditingName(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && saveName()}
                      autoFocus
                    />
                    <div className="edit-buttons">
                      <button onClick={saveName} className="save-btn">‚úì</button>
                      <button onClick={cancelEditing} className="cancel-btn">‚úó</button>
                    </div>
                  </div>
                ) : (
                  <div className="key-name" onClick={() => startEditing(key)}>
                    <span className="name">{key.name}</span>
                    <span className="edit-hint">‚úèÔ∏è</span>
                  </div>
                )}
                <div className="key-details">
                  <span className="code">–ö–æ–¥: {key.code}</span>
                  <span className="protocol">–ü—Ä–æ—Ç–æ–∫–æ–ª: {key.protocol}</span>
                  <span className="bits">–ë–∏—Ç: {key.bitLength}</span>
                </div>
              </div>
              
              <div className="key-actions">
                <button
                  className={`toggle-btn ${key.enabled ? 'enabled' : 'disabled'}`}
                  onClick={() => toggleKey(key.code, !key.enabled)}
                  disabled={loading}
                >
                  {key.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                </button>
                
                <button
                  className="delete-btn"
                  onClick={() => setShowDeleteConfirm(key.code)}
                  disabled={loading}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))
        )}
      </div>

      {showDeleteConfirm && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h3>
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?</p>
            <div className="modal-buttons">
              <button
                className="confirm-btn"
                onClick={() => deleteKey(showDeleteConfirm)}
                disabled={loading}
              >
                –î–∞, —É–¥–∞–ª–∏—Ç—å
              </button>
              <button
                className="cancel-btn"
                onClick={() => setShowDeleteConfirm(null)}
                disabled={loading}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default KeyPage;
